package temp001;

public class ArrayListQuiz {
	// 콜렉션 (ArrayList) 사용하기
	// 1. 선언하기 
	// 콜렉션<객체 타입> 변수명 = new 콜렉션<객체 타입>();
	// 2. 사용법
	// 콜렉션은 배열과 유사한 기능을 제공하는 객체들을 말한다.
	// -List 계열은 자료를 순서대로 저장해 index를 부여한다. 대표적으로 ArrayList를 사용한다.
	// -Set 계열은 자료를 순서 없이 저장하고, 중복을 자동으로 제거한다.(같은 것을 여러 번 저장해도 1번만 저장됨) 대표적으로 HashSet을 사용한다.
	// -Map 계열은 key, value의 쌍으로 자료를 저장한다. key는 특정 객체를 찾기 위한 값(index와 유사한 기능), value는 실질적으로 저장하려는 값이다. 대표적으로 HashMap을 사용한다.
	//		** Map은 콜렉션과 조금 사용법이 다르고 복잡하다. 그냥 이런 것이 있구나 참고만 하고 넘어가자.
	// 3. 콜렉션의 장점
	// 	- 배열과 달리 자동으로 크기가 조절된다.
	// 	- 용도에 따라 적절한 콜렉션을 사용하면, 콜렉션에 이미 생성되어 있는 메소드들을 활용하여 더 많은 기능을 편하게 사용할 수 있다.
	// 4. 콜렉션 기본 메소드
	//  * 모든 콜렉션은 기본적인 사용법이 동일하다.
	// 	(1) 특정 index의 값을 꺼내기 (배열에서 변수명[i] 했던 것과 동일) : 변수명.get(index);
	// 	(2) 값을 콜렉션에 넣기 : 변수명.add(저장할 객체의 변수명);
	//  (3) 다른 콜렉션에 있는 모든 값을 불러와 저장하기 : 변수명.addAll(다른 콜렉션객체 변수명);
	//	(4) 콜렉션의 크기 구하기(배열에서 변수명.length()와 동일) : 변수명.size();
	// 	* 더 자세한 사용법은 변수명. 해서 나오는 메소드들을 읽어보거나 구글에서 검색해볼 것(너무 다양함)
	
	// ObjectQuiz의 2번째 단계까지 다시 실행한다.
	// ArrayList<Student> studentList = new ArrayList<Student>(); 로 ArrayList를 선언한다.
	// studentList에 생성된 학생 정보 객체들을 담는다.
	
	// ArrayList를 대상으로 enhanced-for문을 사용해 3번 단계를 실행한다. 
	
	// 아까의 studentList에 똑같은 학생 정보 객체들을 한번 더 담는다.
	// enhanced-for문을 사용해 3번 단계를 다시 실행한다.
	
	// HashSet을 만들어 학생 객체들을 두 번씩 담는다.
	// enhanced-for문을 사용해 3번 단계를 실행한다.
}
